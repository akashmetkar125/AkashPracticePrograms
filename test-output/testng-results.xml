<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="11" passed="9" failed="2" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2024-08-20T19:11:16 IST" name="Suite" finished-at="2024-08-20T19:12:50 IST" duration-ms="94354">
    <groups>
    </groups>
    <test started-at="2024-08-20T19:11:16 IST" name="Test" finished-at="2024-08-20T19:12:50 IST" duration-ms="94354">
      <class name="task.BrokenLinks">
        <test-method is-config="true" signature="initialise()[pri:0, instance:task.BrokenLinks@e19bb76]" started-at="2024-08-20T19:12:12 IST" name="initialise" finished-at="2024-08-20T19:12:15 IST" duration-ms="3905" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialise -->
        <test-method signature="BrokenLinkTest()[pri:0, instance:task.BrokenLinks@e19bb76]" started-at="2024-08-20T19:12:15 IST" name="BrokenLinkTest" finished-at="2024-08-20T19:12:20 IST" duration-ms="4290" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[The following asserts failed:
Link: 'Appium' is broken with status code 403 expected [true] but found [false],
Link: 'Broken Link' is broken with status code 404 expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: The following asserts failed:
Link: 'Appium' is broken with status code 403 expected [true] but found [false],
Link: 'Broken Link' is broken with status code 404 expected [true] but found [false]
at org.testng.asserts.SoftAssert.assertAll(SoftAssert.java:46)
at org.testng.asserts.SoftAssert.assertAll(SoftAssert.java:30)
at task.BrokenLinks.BrokenLinkTest(BrokenLinks.java:57)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BrokenLinkTest -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:task.BrokenLinks@e19bb76]" started-at="2024-08-20T19:12:20 IST" name="tearDown" finished-at="2024-08-20T19:12:20 IST" duration-ms="218" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- task.BrokenLinks -->
      <class name="practiceSelenium.ActionsPractice">
        <test-method is-config="true" signature="launchUrl()[pri:0, instance:practiceSelenium.ActionsPractice@403f0a22]" started-at="2024-08-20T19:11:36 IST" name="launchUrl" finished-at="2024-08-20T19:11:40 IST" duration-ms="3519" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- launchUrl -->
        <test-method signature="DragTest()[pri:1, instance:practiceSelenium.ActionsPractice@403f0a22]" started-at="2024-08-20T19:11:40 IST" name="DragTest" finished-at="2024-08-20T19:11:42 IST" duration-ms="2463" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- DragTest -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:practiceSelenium.ActionsPractice@403f0a22]" started-at="2024-08-20T19:11:42 IST" name="tearDown" finished-at="2024-08-20T19:11:42 IST" duration-ms="259" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="launchUrl()[pri:0, instance:practiceSelenium.ActionsPractice@403f0a22]" started-at="2024-08-20T19:11:42 IST" name="launchUrl" finished-at="2024-08-20T19:11:50 IST" duration-ms="7198" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- launchUrl -->
        <test-method signature="ClickAndHold()[pri:2, instance:practiceSelenium.ActionsPractice@403f0a22]" started-at="2024-08-20T19:11:50 IST" name="ClickAndHold" finished-at="2024-08-20T19:11:50 IST" duration-ms="281" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ClickAndHold -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:practiceSelenium.ActionsPractice@403f0a22]" started-at="2024-08-20T19:11:50 IST" name="tearDown" finished-at="2024-08-20T19:11:50 IST" duration-ms="157" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="launchUrl()[pri:0, instance:practiceSelenium.ActionsPractice@403f0a22]" started-at="2024-08-20T19:11:50 IST" name="launchUrl" finished-at="2024-08-20T19:11:54 IST" duration-ms="3783" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- launchUrl -->
        <test-method signature="Hover()[pri:2, instance:practiceSelenium.ActionsPractice@403f0a22]" started-at="2024-08-20T19:11:54 IST" name="Hover" finished-at="2024-08-20T19:12:00 IST" duration-ms="6545" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Hover -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:practiceSelenium.ActionsPractice@403f0a22]" started-at="2024-08-20T19:12:00 IST" name="tearDown" finished-at="2024-08-20T19:12:01 IST" duration-ms="148" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- practiceSelenium.ActionsPractice -->
      <class name="task.WindowHandle">
        <test-method is-config="true" signature="initialise()[pri:0, instance:task.WindowHandle@512535ff]" started-at="2024-08-20T19:12:20 IST" name="initialise" finished-at="2024-08-20T19:12:24 IST" duration-ms="4204" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialise -->
        <test-method signature="WindowHandle()[pri:1, instance:task.WindowHandle@512535ff]" started-at="2024-08-20T19:12:24 IST" name="WindowHandle" finished-at="2024-08-20T19:12:34 IST" duration-ms="9388" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- WindowHandle -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:task.WindowHandle@512535ff]" started-at="2024-08-20T19:12:34 IST" name="tearDown" finished-at="2024-08-20T19:12:34 IST" duration-ms="269" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initialise()[pri:0, instance:task.WindowHandle@512535ff]" started-at="2024-08-20T19:12:34 IST" name="initialise" finished-at="2024-08-20T19:12:41 IST" duration-ms="7168" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initialise -->
        <test-method signature="TabHandle()[pri:2, instance:task.WindowHandle@512535ff]" started-at="2024-08-20T19:12:41 IST" name="TabHandle" finished-at="2024-08-20T19:12:50 IST" duration-ms="9173" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TabHandle -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:task.WindowHandle@512535ff]" started-at="2024-08-20T19:12:50 IST" name="tearDown" finished-at="2024-08-20T19:12:50 IST" duration-ms="284" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- task.WindowHandle -->
      <class name="practiceSelenium.Login">
        <test-method signature="TestWithDataProvider(java.lang.String,java.lang.String)[pri:0, instance:practiceSelenium.Login@6436a7db]" started-at="2024-08-20T19:11:16 IST" name="TestWithDataProvider" data-provider="getData" finished-at="2024-08-20T19:11:24 IST" duration-ms="7356" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[akash]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1234]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestWithDataProvider -->
        <test-method signature="TestWithDataProvider(java.lang.String,java.lang.String)[pri:0, instance:practiceSelenium.Login@6436a7db]" started-at="2024-08-20T19:11:24 IST" name="TestWithDataProvider" data-provider="getData" finished-at="2024-08-20T19:11:30 IST" duration-ms="6752" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[metkar]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1278]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestWithDataProvider -->
        <test-method signature="TestWithDataProvider(java.lang.String,java.lang.String)[pri:0, instance:practiceSelenium.Login@6436a7db]" started-at="2024-08-20T19:11:30 IST" name="TestWithDataProvider" data-provider="getData" finished-at="2024-08-20T19:11:36 IST" duration-ms="5811" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[divija]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[88777]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TestWithDataProvider -->
      </class> <!-- practiceSelenium.Login -->
      <class name="practiceSelenium.LoginBaseClass">
        <test-method is-config="true" signature="launchUrl()[pri:0, instance:practiceSelenium.LoginBaseClass@4f1bfe23]" started-at="2024-08-20T19:12:01 IST" name="launchUrl" finished-at="2024-08-20T19:12:05 IST" duration-ms="4294" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- launchUrl -->
        <test-method signature="testLogin()[pri:0, instance:practiceSelenium.LoginBaseClass@4f1bfe23]" started-at="2024-08-20T19:12:05 IST" name="testLogin" finished-at="2024-08-20T19:12:07 IST" duration-ms="2363" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLogin -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:practiceSelenium.LoginBaseClass@4f1bfe23]" started-at="2024-08-20T19:12:07 IST" name="tearDown" finished-at="2024-08-20T19:12:07 IST" duration-ms="201" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="launchUrl()[pri:0, instance:practiceSelenium.LoginBaseClass@4f1bfe23]" started-at="2024-08-20T19:12:07 IST" name="launchUrl" finished-at="2024-08-20T19:12:11 IST" duration-ms="3986" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- launchUrl -->
        <test-method signature="UrlValidateTest()[pri:1, instance:practiceSelenium.LoginBaseClass@4f1bfe23]" started-at="2024-08-20T19:12:11 IST" name="UrlValidateTest" finished-at="2024-08-20T19:12:11 IST" duration-ms="36" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [https://webdriveruniversity.com/Login-Porta/index.html] but found [https://webdriveruniversity.com/Login-Portal/index.html]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [https://webdriveruniversity.com/Login-Porta/index.html] but found [https://webdriveruniversity.com/Login-Portal/index.html]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failNotEquals(Assert.java:1578)
at org.testng.Assert.assertEqualsImpl(Assert.java:150)
at org.testng.Assert.assertEquals(Assert.java:132)
at org.testng.Assert.assertEquals(Assert.java:656)
at org.testng.Assert.assertEquals(Assert.java:666)
at practiceSelenium.LoginBaseClass.UrlValidateTest(LoginBaseClass.java:59)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:686)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:992)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:739)
at org.testng.TestRunner.run(TestRunner.java:614)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- UrlValidateTest -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:practiceSelenium.LoginBaseClass@4f1bfe23]" started-at="2024-08-20T19:12:11 IST" name="tearDown" finished-at="2024-08-20T19:12:12 IST" duration-ms="180" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- practiceSelenium.LoginBaseClass -->
    </test> <!-- Test -->
  </suite> <!-- Suite -->
</testng-results>
